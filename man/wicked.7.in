.TH WICKED 7 "16 July 2012
.SH NAME
wicked \- network management service
.SH SYNOPSIS
.nf
.B #include <wicked/wicked.h>
.fi
.SH DESCRIPTION
Wicked provides a new, experimental framework for network configuration.
.PP
The idea is to replace much of the shell scripting that happens in
\fB/sbin/ifup\fP and the related init scripts with a combination of C
code that handles most of the basic interface configuration tasks, and a
powerful, extensible XML representation of the network configuration. The
major motivation in choosing XML was the ability to represent and
manipulate complex nested configurations.
.PP
.\" ------------------------------------------------------------------
.SH NOTE
At this time, \fBWicked does not provide a stable development API\fR.
.SH DBus Services
This implementation uses a DBus based server and a command line utility.
If you're familiar with DBus terminology, you will recall that the
DBus concept revolves around "objects" that can have one or more
"interfaces" associated with them; pretty much like in any object
oriented model. Since we're talking a lot about "network interfaces"
in this manual page and other documentation, I would like to avoid
the term "DBus interface" as much as possible, and refer to "DBus
APIs" instead.
.PP
The wicked server is called \fBwickedd\fP, and
offers a variety of APIs to manage network interfaces, to create
and delete virtual interfaces, etc. These APIs are structured
in a layered fashion that matches the different layers in the network
stack. For instance, there is an Ethernet API for accessing the
link-layer properties of an Ethernet API; there is an API
class that represents the properties of a generic kernel network device;
and there are APIs for address configuration.
.PP
For every network interface in the system, the server creates an
object and attaches the appropriate DBus APIs to it. The DBus
object path is formed by concatenating \fB/org/opensuse/Network/Interface\fP
with the interface index. This allows the object handle to be unaffected
when the interface is renamed.
.PP
In addition to the \fBwickedd\fP server itself, there are several
auxiliary services that handle various dynamic address configuration,
and propel interface bring-up. For instance, there are daemons
to handle DHCP4, DHCP6 and IPv4 link-layer autoconfiguration (aka
ipv4ll, or IP zeroconf) as well as a \fBwickedd-nanny\fP daemon that
communicates interface configuration policies to \fBwikcedd\fP, thus
driving interface bring-up. The main goal for introducing
\fBwickedd-nanny\fP is to handle use cases for interface hotplugging
and wireless roaming. The reason to create these anew is to be
able to integrate them more closely with \fBwickedd\fP.
.PP
.\" ------------------------------------------------------------------
.SH File format
\fBWicked\fP strictly separates \fIconfiguration files\fP stored somewhere
in the system from the current \fIconfiguration state\fP maintained
by the kernel and closely related system daemons like \fBpppd\fP(8) or
\fBopenvpn\fP(8). The server only knows about the latter, but does not
parse any configuration files, and does not maintain any state besides
what is actually in effect. On the other hand, the client never probes
the kernel directly to obtain the current system state. The client's
job is to parse the configuration file(s) handed to it by the user,
process and convert them to policies, and hand them off to wickedd-nanny.
wickedd-nanny then performs device configuration when policy conditions
have been met.
.PP
Currently, the \fBwicked\fP client supports the original sysconfig ifcfg-
file format and converts the data found to it's native xml format.
.PP
.SS Simple Ethernet Example (ifcfg-eth0)
STARTMODE="onboot"
BOOTPROTO="dhcp4"
.PP
.SS Resulting Ethernet Configuration in Native XML
In its simplest format, an interface description consists of little
more than an \fB<interface>\fP element specifying the interface name
and the requested address configuration:
.PP
.nf
 <interface>
   <name>eth0</name>
   <control>
    <mode>boot</mode>
   </control>

   <ipv4:dhcp>
     <enabled>true</enabled>
   </ipv4:dhcp>
 </interface>
.fi
.PP
Just like DHCPv4, there are elements for other address configuration
modes as well, such as \fB<ipv6:dhcp>\fP, or \fB<ipv4:static>\fP
\(em you get the idea.
.PP
For further information on the file syntax, refer to \fBwicked-config\fP(5).
.PP
.\" ------------------------------------------------------------------
.SH Mode of Operation
The \fBwicked\fP client utility supports a number of different activities,
but its most important job is probably to generate policies from configuration
files and initiate bring up of network interfaces.
This is performed by calling \fBwicked ifup\fP, which takes a number of
parameters to select which interfaces to bring up, and how. If you want to
learn about the details, please refer to \fBwicked\fP(8).
.PP
For the sake of this discussion, let's assume we're asking \fBwicked\fP to
bring up a VLAN interface. After parsing the configuration file and generating
a suitable policy, the \fBwicked\fP will do several things in preparation
of bringing up the device:
.TP
*
Build a \fIhierarchy\fP of devices depending on each other. In this example,
let's assume that the VLAN device depends on the underlying interface \fBeth0\fP.
In order to bring up the VLAN, the Ethernet interface must be brought up as
well (at least in terms of the link-layer).
.TP
*
Pass the policies for the specified interfaces to \fBwickedd-nanny\fP
.TP
With these steps performed, \fBwickedd-nanny\fP will work its way through all
layers of network configuration to activate the devices.
.TP
Device creation
Since the VLAN interface is a virtual interface which does not exist yet,
it has to be created first. \fBwickedd-nanny\fP does this by calling a \fIdevice
factory\fP service for VLAN devices.
.TP
Link-layer configuration
Next, it will apply any link-layer configurations specified. For Ethernet
interfaces, this could include any \fBethtool\fP settings, or a change of
the MAC address.
.TP
Network protocol selection
This step is used to change the per-device settings of IPv4 and IPv6, such
as packet forwarding. This steps also takes care of disabling IPv6 on the
device, if requested.
.TP
Firewall
This step will bring up the firewall.
.TP
Link layer configuration and authentication
These steps will take care of bringing up the link layer. In the case
of an Ethernet device, this will wait for the link layer negotiation
to complete.  In the case of an authenticated link layer, such as 802.11
WiFi or 802.1x Ethernet authentication, care would be taken to perform
the required authentication steps.
.IP
In our example, \fBwickedd-nanny\fP directs \fBwickedd\fP to first
bring up \fBeth0\fP and wait for its link layer negotiation to complete.
The configuration of the VLAN device is not allowed to proceed until the
subordinate device is up. Once that is the case, \fBwickedd\fP would also
bring up the VLAN device.
.IP
As we've reached the desired state for the eth0 device with this step,
no further action is taken.
.TP
Address Configuration
Finally, \fBwickedd\fP would configure addresses for all
requested modes. In the given example, it would just assign the given
static addresses. If we had also requested say DHCPv6, it would start
the DHCPv6 protocol on this device and wait for it to come back with
an address lease.
.IP
Note that in the \fBwicked\fP universe, address assignment should happen
through \fBwickedd\fP so that it can track which addresses are active,
and have been assigned through which protocol. This prevents different
address configuration mechanisms to step on each other's toes.
.\" ------------------------------------------------------------------
.SH "SEE ALSO"
.BR wickedd (8),
.BR wicked (8),
.BR wicked (7),
.BR wicked-config (5).
.SH COPYRIGHT
Copyright (C) 2014 SUSE LINUX Products GmbH, Nuernberg, Germany.
.SH BUGS
Please report bugs as described at <@PACKAGE_BUGREPORT@>
.SH AUTHORS
Olaf Kirch
