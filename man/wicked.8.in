.TH WICKED 8 "16 July 2012
.SH NAME
wicked \- network management utility
.SH SYNOPSIS
.BI "wicked [" global-options "] ifup [" options "] " interface
.br
.BI "wicked [" global-options "] ifdown [" options "] " interface
.br
.BI "wicked [" global-options "] ifreload [" options "] " interface
.br
.BI "wicked [" global-options "] ifstatus [" options "] " interface
.br
.BI "wicked [" global-options "] ifcheck [" options "] " interface
.br
.BI "wicked [" global-options "] show-config [" options "] [" interface "]
.br
.BI "wicked [" global-options "] convert [" options "] [" file " ... ]
.br
.BI "wicked [" global-options "] show-xml [" options "] [" interface "]
.br
.BI "wicked [" global-options "] xpath [" options "] " format ...
.br
.BI "wicked [" global-options "] getnames [" options "] " device ...
.br
.PP
.\" ----------------------------------------
.SH DESCRIPTION
\fBwicked\fP offers access to the wicked network managment service from the
command line. It can be used to display the current state of network devices,
to bring interfaces up or down, or to check their operational status.
.PP
Conceptually, the wicked network management system deals with two very
distinct classes of information. One is the set of \fIconfiguration
files\fP stored somewhere in the system; the other is the current
\fIconfiguration state\fP maintained by the kernel and closely related
system daemons like \fBpppd\fP(8) or \fBopenvpn\fP(8).
.PP
The server only knows about the latter, but does not parse any configuration
files, and does not maintain any state besides what is actually in
effect. On the other hand, the client never probes the kernel directly
to obtain the current system state. The client's
job is to parse the configuration file(s) handed to it by the user,
process and convert them to policies, and hand them off to wickedd-nanny.
wickedd-nanny then performs device configuration when policy conditions
have been met.
.PP
The client, nanny and server processes communicate with each other over DBus.
.\" One day, when we have a devel package.
.\"For a conceptual overview of the supported DBus APIs, please refer
.\"to \fBwicked\fP(7).
.\" ----------------------------------------
.SH OPTIONS
.B wicked
supports a set of options common to all subcommands. These options
must precede the subcommand, as in
.PP
.nf
.B "     # wicked --dry-run ifup eth0
.fi
.PP
Currently, \fBwicked\fP supports the following list of options:
.TP
.BI "\-\-config " filename
By default, the daemon reads its configuration from
\fB@wicked_configdir@/common.xml\fP.
The
.B \-\-config
options allows you to specify a different configuration file.
.TP
.BI "\-\-log-level " level
Set log \fIlevel\fP to one of
<\fIerror\fP|\fIwarning\fP|\fInotice\fP|\fIinfo\fP|\fIdebug\fP>.
.TP
.BI "\-\-log-target " target
Set log \fItarget\fP to one of <\fIstderr\fP|\fIsyslog\fP>,
optionally followed by a colon and target specific details.

.in +4n
.IR stderr "[:" options "]"
with the following options:
.in +4n
.I pid
include program pid in each message
.in

.IR syslog "[:" facility "[:" options "]]"
with following facilities:
.in +4n
.IR user ", " daemon ", " local0 " .. " local7
.in
and options:
.in +4n
.I perror
log the message to stderr as well
.in

.TP
.BI "\-\-debug " facility
Enable debugging for \fIfacility\fP.
The list of available facilities can be obtained using
\fB"\-\-debug help"\fP.
.TP
.BI "\-\-root-directory " pathname
Specify an alternative root directory from where to load files.
This applies to the client's configuration file as well as any
interface configuration files.
.TP
.BI "\-\-dry-run
skips all calls to \fBwickedd\fP that would modify the current system
settings, instead displaying the command that would be sent, along with
an XML representation of the XML.
Helpful for getting a feel for how the utility and the protocol work,
and for debugging.
.IP
.B This does not work at the moment.
.TP
.BI "\-\-systemd "
Forces wicked to use the syslog target for logging.
.TP
.BI "\-\-transient "
Enables more detailed interface return codes.
.PP
.\" ----------------------------------------
.SH ifup - bring up one or more interfaces
To bring up interfaces, use \fBwicked ifup\fP.
This command supports a number of different modes of operations.
In its simplest form, you just give it the name of an interface, and
it will bring up the interface using the stored system configuration:
.PP
.nf
.B "    # wicked ifup eth0
.fi
.PP
This invocation makes \fBwicked\fP:
.nf
1. Run the ibft extension to get all firmware type configurations
2. Read all sysconfig network configuration files from \fB/etc/sysconfig/network\fP 
3. Read all XML network configuration files from \fB/etc/wicked/ifconfig\fP 
.fi

For each interface to be configured, wicked will generate a policy and pass
this to wickedd-nanny. wickedd-nanny will then kick off applying the configuration
to wickedd. wickedd then will perform the necessary steps to configure the interface.
These steps include assigning a static address, and starting DHCP and similar
address configuration protocols as required.
.PP
Instead of an interface name, you can also use the special names \fBall\fP
or \fBboot\fP, which will tell \fBwicked\fP to bring up all interfaces.
The difference between \fBall\fP and \fBboot\fP is in behavior. When
using the latter, \fBwicked\fP will ignore any interfaces that are not
configured as boot time interfaces.
.PP
It is also possible to bring up interfaces that do not have a
configuration stored in the system; using the \fB--ifconfig\fP
option you can provide a configuration by specifying a path
prefixed by a supported schema. Again, you have to specify
the name of the interface to bring up, or \fBall\fP
to bring up all interfaces described in the file:
.PP
.nf
.B "    # wicked ifup --ifconfig bridgecfg.xml all
.B "    # wicked ifup --ifconfig compat:/etc/sysconfig/network all
.B "    # wicked ifup --ifconfig firmware:ibft:ethernet0 all
.B "    # wicked ifup --ifconfig wicked:xml:/etc/wicked/ifconfig all
.fi
.PP
Note that \fBwicked\fP attempts to bring up interfaces in a "reasonable
order": for virtual interfaces like VLANs, bridges or bonds, it will
always make sure that all subordinate devices are in the required state
before bringing up the virtual device itself.
.PP
\fBwicked\fP offers a compatability mode as shown above in order to
ease migration from ifcfg file format to XML. ifcfg syntax is described
in \fBifcfg\fP(5):
.PP
The \fBifup\fP command supports the following options:
.TP
.BI "\-\-ifconfig " pathname
Specify an alternative source of network configuration, instead of
obtaining the system's interface configuration.
.IP
When specifying the path of a file, it must contain an XML definition
of the interface(s) by default. When \fIpathname\fP refers to a directory,
\fBwicked\fP will scan it for files having a \fB.xml\fP suffix and
parse these.
.IP
If the file name starts with the string \fBcompat:\fP, \fBwicked\fP is
instructed to load the interface configuration from files in the
old-style "ifcfg" syntax, as described by the \fBifcfg\fP(5) manual page.
The string following the \fBcompat:\fP prefix is interpreted as a
directory name where \fBwicked\fP will scan for files with names matching
\fBifcfg-*\fP and related files, like \fBroutes\fP and \fBifroute-*\fP.
.IP
The special name \fBfirmware:\fP can be used to obtain the interface
definition(s) from firmware services like iBFT.
.TP
.BI "\-\-mode " identifier
This can be used in conjunction with the special interface name \fBall\fP,
in order to restrict the set of interfaces that will be brought up.
If this option is given, only those interface configurations are considered
that have a control \fB<mode>\fP element containing the given identifier.
.IP
If the interface does not specify a \fB<mode>\fP element in its control
section, then it defaults to \fBboot\fP.
.TP
.BI "\-\-boot-stage " identifier
This can be used in conjunction with the special interface name \fBall\fP,
in order to restrict the set of interfaces that will be brought up.
If this option is given, only those interface configurations are considered
that have a \fB<boot-stage>\fP element containing the given identifier.
.IP
If the interface does not specify a \fB<boot-stage>\fP element in its control
section, then it defaults to \fBdefault\fP.
.TP
.BI "\-\-skip-origin " config source
This can be used to ignore interfaces that have already been configured.
For instance, an interface that has been configured based on a firmware
configuration (see option \fB\-\-ifconfig\fP above) will be marked as
having a configuration origin of \fBfirmware\fP. When bringing up the
remaining network interfaces, it is a good idea to not touch these.
This can be achieved by running \fBwicked\fP with the option
\fB\-\-skip-origin firmware\fP.
.TP
.BI "\-\-skip-active
Ignore all interfaces that have already been brought up.
.TP
.BI "\-\-timeout " seconds
The default timeout for bringing up a network device is 5 seconds. If
the interface fails to come up within this time, \fBwicked\fP will fail
the device and and exit with an error code. All interfaces depending
on the failed interface will fail as well.
.BI "\-\-persistent
Set interface into persistent mode (no regular ifdown allowed).
.IP
Failed interfaces are left in an undefined state.
.PP
.\" ----------------------------------------
.SH ifdown - bring down one or more interfaces
This command does the reverse of \fBifup\fP.
Again, you can give it either a specific interface name, or use
the special name \fBall\fP to bring down all devices. When
bringing down several interfaces, the utility tries to do this
in a suitable order.
.PP
The \fBifdown\fP command supports the following options:
.TP
.BI "\-\-force " state
Forcefully put interface into a specified state. This option
is applicable whether the interface is persistent or not. State
can be one of:
.nf
.BI "     device-down
.BI "     device-exists
.BI "     device-up
.BI "     protocols-up
.BI "     firewall-up
.BI "     link-up
.BI "     link-authenticated
.BI "     lldp-up
.fi
.TP
.BI "\-\-delete
Attempts to delete an interface. This is equivalent to
--force device-down.
.TP
.BI "\-\-no-delete
Brings the specified interface to device-exists state. In other
words, the interface is down, but not deleted. Persistent
interfaces are ignored.
.TP
.BI "\-\-timeout " seconds
The default timeout for bringing down a network device is 5 seconds. If
the interface fails to shut down within this time, \fBwicked\fP will fail
the device and and exit with an error code. All interfaces that are
used by the failed interface will fail as well.
.IP
Failed interfaces are left in an undefined state.
.PP
.\" ----------------------------------------
.SH ifreload - checks whether a configuration has changed, and applies accordingly.
To automatically re-apply changed sections of a configuration for specified interfaces,
use \fBwicked ifreload\fP. This command performs necessary ifdown/ifup operations
and attempts to apply detected differences. For additional, see the uses cases below.
.PP
.nf
.B "    # wicked ifreload eth0
.B "    # wicked ifreload all
.fi
.PP
There are 4 potential ifreload use cases:
.nf

.BI "1. Configuration unchanged
    ifreload does not touch specified interfaces.
.BI "2. Configuration changed
    performs ifdown followed by ifup with the new configuration on the 
    specified interfaces.
.BI "3. Configuration deleted
    performs ifdown --delete in order to remove the specified interfaces.
.BI "4. New configuration added
    performs regular ifup on specified interfaces.
.fi
.PP
This behavior can be fine-tuned using the following options:
.TP
.BI "\-\-ifconfig " pathname
Specify an alternative source of network configuration, instead of
obtaining the system's interface configuration.
.IP
When specifying the path of a file, it must contain an XML definition
of the interface(s) by default. When \fIpathname\fP refers to a directory,
\fBwicked\fP will scan it for files having a \fB.xml\fP suffix and
parse these.
.IP
If the file name starts with the string \fBcompat:\fP, \fBwicked\fP is
instructed to load the interface configuration from files in the
old-style "ifcfg" syntax, as described by the \fBifcfg\fP(5) manual page.
The string following the \fBcompat:\fP prefix is interpreted as a
path name. If this path name refers to a directory,
\fBwicked\fP will scan it for files with names matching \fBifcfg-*\fP.
If the path name refers to a regular file, it will parse this file, assuming
it is an ifcfg file.
.IP
The special name \fBfirmware:\fP can be used to obtain the interface
definition(s) from firmware services like iBFT.
.TP
.BI "\-\-persistent
Set interface into persistent mode (no regular ifdown allowed).
.PP
.\" ----------------------------------------
.SH ifstatus/show - displays detailed interface information.
To display/diagnose system wide interface network configuration, use
\fBwicked ifstatus/show\fP. ifstatus command additionally reads
system wide configuration and so is usable by root only. The show
variant, on the other hand, deals with runtime configurations of
existing interfaces only. Thus, it can be used by users.
.PP
.nf
.B "    # wicked ifstatus eth0
.B "    # wicked ifstatus all
.fi
.PP
.nf
Example output for loopback interface:
    lo              up
          link:     #1, state up
          type:     loopback
          cstate:   network-up
          config:   compat:/etc/sysconfig/network/ifcfg-lo
          leases:   ipv4 static granted
          addr:     ipv4 127.0.0.1/8
          addr:     ipv6 ::1/128
.fi
.PP
This behavior can be fine-tuned using the following options:
.TP
.BI "\-\-quiet "
Used to obtain status return codes only. No information is output,
so can be used for scrpiting.
.TP
.BI "\-\-brief "
Displays device status for specified interfaces.
.TP
.BI "\-\-ifconfig " filenam
Note that this is ifstatus specfic (ie. root only).
Used to alter the source of the specified interface configurations.
.PP
.\" ----------------------------------------
.SH ifcheck - inspects particular interface details
To inspect details such as interface presence, change in interface
configuration, internal interface state (cstate) and persistent mode
for specified interfaces, use \fBwicked ifcheck\fP. This command
can be particularly helpful to script writers.
.PP
.nf
.B "    # wicked ifcheck --missed eth0
.B "    # wicked ifcheck --missed --changed all
.fi
.PP
.TP
.BI "\-\-ifconfig " pathname
Specify an alternative source of network configuration, instead of
obtaining the system's interface configuration.
.IP
When specifying the path of a file, it must contain an XML definition
of the interface(s) by default. When \fIpathname\fP refers to a directory,
\fBwicked\fP will scan it for files having a \fB.xml\fP suffix and
parse these.
.IP
If the file name starts with the string \fBcompat:\fP, \fBwicked\fP is
instructed to load the interface configuration from files in the
old-style "ifcfg" syntax, as described by the \fBifcfg\fP(5) manual page.
The string following the \fBcompat:\fP prefix is interpreted as a
path name. If this path name refers to a directory,
\fBwicked\fP will scan it for files with names matching \fBifcfg-*\fP.
If the path name refers to a regular file, it will parse this file, assuming
it is an ifcfg file.
.IP
The special name \fBfirmware:\fP can be used to obtain the interface
definition(s) from firmware services like iBFT.
.TP
.BI "\-\-quiet "
Used to obtain status return codes only. No information is output,
so can be used for scrpiting.
.TP
.BI "\-\-missed "
Check if the interface is missed.
.TP
.BI "\-\-changed"
Check if the interface's configuration is changed.
.TP
.BI "\-\-state " state-name
Check if the interface is in the given state. Possible states:
.nf
.B "    none
.B "    device-down
.B "    device-exists
.B "    device-up
.B "    protocols-up
.B "    firewall-up
.B "    link-up
.B "    link-authenticated
.B "    lldp-up
.B "    network-up
.fi
.TP
.BI "\-\-persistent "
Check if the interface is in persistent mode.
.PP
.\" ----------------------------------------
.SH show-config - reads, conversts and displays all available configuration files.
To display all available network configuration files in native XML format for
specified sources (default is all sources), use \fBwicked show-config\fP. To specify
the source, use one of the following:
.nf
.B "    firmware:
.B "    compat:
.B "    wicked:[PATH]
.fi
.PP
.nf
.B "    # wicked show-config
.B "    # wicked show-config compat:
.fi
.PP
.TP
.PP
This behavior can be fine-tuned using the following options:
.TP
.BI "\-\-raw "
Filter from output all config meta-data.
.TP
.BI "\-\-output " path
By default, \fBwicked\fP will write the XML document to its standard output. Using
this option, you can instruct it to write to a different file instead. If the specified
\fIpath\fP is a directory, the XML document will be split into separate files, one for
each interface.
.PP
.\" ----------------------------------------
.SH convert - convert legacy files to XML
In order to ease transition, wicked supports old-style ifcfg files, and can converts
them to XML. When invoked without arguments, it will try to determine the type of
Linux distro you're on, and create one XML file from all your ifcfg files.
.PP
Note that convert is a variant is show-config, and is equivalent to:
\fBshow-config compat:\fP
.PP
.\" ----------------------------------------
.SH getnames - obtain different names for an interface
\fBwicked\fP can identify network devices via a number of different
mechanisms, in addition to the usual interface name.  For instance,
you can identify an Ethernet device using the \fIpermanent MAC address\fP
programmed into the card's EEPROM, or via its PCI topology.
.PP
For the convenience of management applications, \fBwicked\fP provides
a function to retrieve all possible names for an interface names as
XML. For each device specified on the command line, a \fB<names>\fP
is printed, with zero or more \fB<name>\fP elements.
.PP
The \fBgetnames\fP command supports the following options:
.TP
.BI "\-\-modem "
Instead of querying network devices, interpret the given interface name
as a modem device.
.PP
.\" ----------------------------------------
.SH xpath - retrieve data from an XML blob
The \fBwickedd\fP server can be enhanced to support new network device types
via extension commands \(em usually shell scripts. When invoking such a script,
\fBwickedd\fP will hand it the arguments of the DBus call as an XML document.
.PP
The \fBxpath\fPP command tries to provide a flexible and convenient interface for extracting
individual bits of information from an XML document. To the degree that XML
can be convenient to a shell programmer...
.PP
For this, \fBwicked\fP supports expressions using a (subset of) the XPATH 1.0
syntax. These xpath expressions can be embedded into format strings using
\fB"%{\fIexpression\fR}".
Several expressions can be embedded into one format string; this can
help to combine pairs of information such as e.g. address and prefix
length.
.PP
The \fBxpath\fP command by default expects an XML document on standard input.
You can use the \fB\-\-file\fP option to specify a filename.
.PP
The \fBxpath\fP command supports the following options:
.TP
.BR "\-\-reference " xpath-expr
By default, the command will evaluate all XPATH expressions relative to
the document's root node. Using this option allows you to "drill into"
the document: the utility will first evaluate the given expression to
look up 0 or more XML nodes in the document, and then evaluate all
format strings relative to these nodes. It is an error for the
reference expression to yield data other than XML elements (such as
strings).
.TP
.BR "\-\-file " filename
The file containing the XML document to operate on.
.PP
This manual page cannot give a full overview of xpath, of course, 
however consider the following examples (which assume the input is
an XML interface description):
.PP
.nf
.B "# wicked xpath \(dqvlan_tag=%{/interface/vlan/tag}\(dq"
.fi
.PP
Given a VLAN interface definition, this will expand to the contents 
of the \fB<tag>\fP element of the VLAN definition. The "path-like"
syntax specifies how to traverse the XML tree to find the desired node.
Assuming the tag is 42, the above command will print \fBvlan_tag=42\fP.
In case the document contains several VLAN interface definitions,
this would of course print several lines of output; one per VLAN tag
found.
.PP
Note that the \fBxpath\fP command considers an empty expansion as error.
If an element or expansion is considered optional, you can prefix it
with a question mark, as in \fB%{?...}\fP. If the expansion fails, the
expression will be replaced with an empty string.
.PP
As a different example, consider a bridge definition like the following:
.PP
.nf
<bridge>
  <ports>
    <e>
     <device>eth0</device>
     <priority>1</priority>
    </e>
    <e>
     <device>eth1</device>
     <priority>0</priority>
    </e>
  </ports>
</bridge>
.fi
.PP
In order to print out a list of device/priority pairs of all ports, you could
invoke \fBwicked\fP like this:
.PP
.nf
.B "# wicked xpath --reference \(dq/bridge/ports/e\(dq \(rs
.B "          \(dqdev=%{device} priority=%{?priority}\(dq
.fi
.PP
By using the \fB\-\-reference\fP option, you instruct \fBwicked\fP to loop over
all XML nodes matching this expression - i.e. the two child nodes of the
\fB<ports>\fP element. For each of them in turn, the xpath expression is
evaluated \fIrelative to each node\fP. Note the use of the question mark in
the \fBpriority\fP term, marking the field as optional.
.\" ----------------------------------------
.SH "SEE ALSO"
\fBwickedd\fP(8), \fBwicked-config\fP(5).
.\" ----------------------------------------
.SH COPYRIGHT
Copyright (C) 2014 SUSE LINUX Products GmbH, Nuernberg, Germany.
.SH BUGS
Please report bugs at <https://bugzilla.novell.com/index.cgi>
.SH AUTHORS
Olaf Kirch
Pawel Wieczorkiewicz
Karol Mroz
