.TH WICKED-CONFIG 5 "16 July 2012
.SH NAME
wicked-config.xml \- wicked configuration file
.SH SYNOPSIS
.B @wicked_configdir@/common.xml
.br
.B @wicked_configdir@/server.xml
.br
.B @wicked_configdir@/client.xml
.br
.B @wicked_configdir@/nanny.xml
.br
.SH DESCRIPTION
These files contain the global configuration options for the \fBwicked\fP
network management service. All files follow the same XML schema.
.PP
\fBcommon.xml\fP contains common definitions that should be used by all applications.
It is sourced by the other configuration files. It can be used to enable
debugging across all \fBwicked\fP components, for instance.
.PP
Different components of \fBwicked\fP will load different files on startup; for
instance, the \fBwickedd\fP server process will try to load \fBserver.xml\fP. If
that file does not exist, it will fall back to \fBcommon.xml\fP and try to read that
directly.
.PP
The following table shows which \fBwicked\fP commands use which configuration file:
.PP
.TS
box;
l|l
lb|lb.
Application	Filename
=
wicked	client.xml
wickedd	server.xml
wickedd-nanny	nanny.xml
wickedd-auto4	auto4.xml
wickedd-dhcp4	dhcp4.xml
wickedd-dhcp6	dhcp6.xml
.TE
.PP
.\" --------------------------------------------------------
.SH GENERAL OPTIONS
.\" --------------------------------------------------------
.PP
The configuration file is an XML document; its root node must be called
\fB<config>\fP.
.TP
.B include
This element can be used to refer to an additional XML configuration
file. When parsing a configuration file, \fBwicked\fP will traverse the
XML hierarchy once, in the order in which elements occur in the file.
The file referenced by an \fB<include>\fP element is loaded and parsed
at the time the \fB<include>\fP element is encountered.
.IP
Note that the contents of the file will not be \(dqincluded\(dq in the
way you would expect this from e.g. a macro preprocessor. Instead, the
referenced file must be a proper XML document, and its top node must also
be a \fBconfig\fP element.
.\" --------------------------------------------------------
.SS Common pathnames
.TP
.B piddir
This element specifies the directory used to write pid files.
.IP
The \fBpath\fP attribute of this element contains the path to this
directory. The optional \fBmode\fP attribute can be used to specify
the permissions of this directory.
.IP
The default is to use \fB@wicked_piddir@\fP, mode \fB0755\fP.
.IP
.nf
.B "  <statedir path=\(dq@wicked_statedir@\(dq mode=\(dq0755\(dq />
.fi
.PP
.TP
.B statedir
This element specifies the location of the directory containing various
files relating to the state of the server. For instance, temporary files
are stored here when starting external programs like \fBpppd\fP(8).
.IP
The \fBpath\fP attribute of this element contains the path to this
directory. The optional \fBmode\fP attribute can be used to specify
the permissions of this directory.
.IP
The default is to use \fB@wicked_statedir@\fP, mode \fB0755\fP.
.IP
.nf
.B "  <statedir path=\(dq@wicked_statedir@\(dq mode=\(dq0755\(dq />
.fi
.PP
.TP
.B storedir
This element specifies the location of the directory containing various
(reboot) persistent data. For instance, the DHCP DUID and lease files
are is stored in this directory.
.IP
The \fBpath\fP attribute of this element contains the path to this
directory. The optional \fBmode\fP attribute can be used to specify
the permissions of this directory.
.IP
The default is to use \fB@wicked_storedir@\fP, mode \fB0755\fP.
.IP
.nf
.B "  <statedir path=\(dq@wicked_storedir@\(dq mode=\(dq0755\(dq />
.fi
.PP
.\" --------------------------------------------------------
.SS Miscellaneous
.TP
.B debug
This element specifies the default debug facilities to be enabled.
Allowed is a comma separated list of supported facility names, including
set names such as \fBall\fP and \fBmost\fP and names with a "-" prepended
for negated facilities, e.g. \fI"all,-xpath"\fR.

The '\fBwicked --debug help\fP' command shows valid facility names.
If a debug level is specified on the command line or via the WICKED_DEBUG
environment variable, the setting from the XML configuration file will be
ignored.
.\" --------------------------------------------------------
.SS DBus service parameters
All configuration options related to the DBus service are grouped below
the \fB<dbus>\fP element. Currently, the following child elements are
recognized:
.TP
.B service
This element specifies the DBus service name used, and must be a valid
DBus API name.
The default is "org.opensuse.Network".
.TP
.B schema
This element specifies the location of the schema files.
The schema defines the various DBus APIs offered by the server,
and how portions of an interface XML description map to their
arguments. The schema files do not contain user-serviceable parts,
so it's best to leave this option untouched.
.PP
Here's what the default configuration looks like:
.PP
.nf
.B "  <dbus>
.B "    <service name=\(dqorg.opensuse.Network\(dq />
.B "    <schema name=\(dq@wicked_schemadir@/wicked.xml\(dq />
.B "  </dbus>
.fi
.\" --------------------------------------------------------
.SH CLIENT ONLY OPTIONS
.TP
.B sources
This specifies a list of sources that the \fBwicked\fP client will pick
up interface configurations from, and their load order. Child elements
of \fB<sources>\fP must be called \fBifconfig\fP, and are expected to
specify a \fBlocation\fP attribute.
.IP
The location attribute takes the form \fItype\fB:\fIstring\fR, where
\fIstring\fP may be empty.
.IP
.TS
box;
l|l
lb|lb.
Type	Description
=
firmware	Get configuration from firmware, usually iBFT
compat	Load interface description using legacy ifcfg files
wicked	Load interface description using native wicked XML
.TE
.PP
.IP
The \fBfirmware\fP type takes no additional \fIstring\fP parameter.
When specifying either \fBwicked\fP, you can optionally specify a
directory where to look for XML interface configurations. If no
directory is given, the path defaults to \fB@wicked_configdir@/ifconfig\fP.
When specifying either \fBcompat\fP, you can optionally specify the
ifcfg flavor, which can be either \fBsuse\fP or \fBredhat\fP. If no
flavor is specified, the result is implementation dependent - but
usually, it will pick the platform default it was compiled on.
.IP
The default configuration is this:
.IP
.nf
.B "  <sources>
.B "    <ifconfig location=\(dqfirmware:\(dq />
.B "    <ifconfig location=\(dqcompat:\(dq />
.B "    <ifconfig location=\(dqwicked:\(dq />
.B "  </sources>
.fi
.\" --------------------------------------------------------
.SH ADDRESS CONFIGURATION OPTIONS
The \fB<addrconf>\fP element is evaluated by server applications only, and
controls the behavior of dynamic address configuration protocols such
as DHCP. This options to blacklist e.g. certain DHCP servers, and which
information provided by address configuration to apply.
.TP
.B default-allow-update
Most dynamic address configuration protocols, including DHCP, do not just provide
a list of addresses and routes to install for the managed network interface,
but can be used to provide information such as a list of DNS servers, directory
information (for e.g. NIS), etc. A system receiving that information is free to
reconfigure some of its services based on this information.
For instance, it makes a lot of sense to configure the resolver library to use
the DNS servers specified by a DHCP server. On the other hand, you may want to
ignore any NIS information received via DHCP.
.IP
The \fB<default-allow-update>\fP is applied to static and intrinsic leases, which
do not have an own, type and address family specific \fB<allow-update>\fP element
as available under the \fB<dhcp6>\fP, \fB<dhcp4>\fP, \fB<auto6>\fP and \fB<auto4>\fP
sub-elements, which support a sub-set of the possible facilities listed here.
The \fB<default-allow-update>\fP and the type specific \fB<allow-update>\fR elements
enable you to control which system services \fBwicked\fP will (request and) consider
to update in the system.
.IP
It contains a list of either empty XML elements e.g. (<dns/><ntp/>) naming system
the facilities or alternatively, a space separated string list (dns ntp) with the
facility names.
The special elements \fBdefault\fR, \fBnone\fP and \fBall\fP enable and disable
the default, none and all updates, respectively. A \fBno-\fR or a \fB-\fR in the
front of a facility name permits to remove/disable a facility from the currently
applied set and enable further supported facilities, e.g. \fBdefault,-nis,slp\fR
is applying a modified \fBdefault\fR set with disabled \fBnis\fR and the optional
\fBslp\fR facility enabled additionally.
.IP
The following updater facilities are currently defined:
.IP
.TS
box;
l|l
lb|lb.
Name	Description
=
default-route	system default route (IPv4 or IPv6)
hostname	system hostname
dns	update resolv.conf or dns server (via netconfig)
nis	NIS client (via netconfig)
ntp	NTP servers (via netconfig)
smb	SMB settings (no netconfig module implemented)
nds	NDS servers (no netconfig module implemented)
slp	SLP client (no netconfig module implemented)
sip	SIP client (no netconfig module implemented)
log	syslog servers (no netconfig module implemented)
lpr	print servers (no netconfig module implemented)
tz	posix time zone (no netconfig module implemented)
mtu	adjust interface mtu (dhcp4)
boot	root-path (dhcp4)/boot-url (dhcp6) used in the initrd
.TE

.IP
Note that administrators wishing to support currently unimplemented
updaters can do so by configuring external updaters using the
\fB<system-updater>\fP extensions described below.
.TP
.B dhcp4
This element can be used to control the behavior of the DHCP4
supplicant. See below for a list of options.
.TP
.B dhcp6
This element can be used to control the behavior of the DHCP6
supplicant. See below for a list of options.
.TP
.B auto6
This element can be used to control the behavior of AUTO6 processing.
.TP
.B arp
This element can be used to control ARP verify and ARP notify settings. See
\fBARP CONFIGURATION OPTIONS\fR for more info.

.PP
.\" --------------------------------------------------------
.SH ARP CONFIGURATION OPTIONS
The ARP configuration specify the verify and notify settings used by wicked
for duplicate address detection. If specified as child of \fB<config><addrconf>\fR
the settings apply to STATIC only. To change the ARP settings for AUTO4 or
DHCP4, add the \fB<arp>\fR node as child of the corresponding
\fB<config><addrconf><auto4>\fR or \fB<config><addrconf><dhcp4>\fR node.

It is recommended to set this settings in \fB@wicked_configdir@/common-local.xml\fR,
as this config file is used by wickedd, wickedd-dhcp4 and wickedd-auto4.
.PP
.nf
.B "  <arp>
.B "    <verify>
.B "      <count></count>
.B "      <retries></retries>
.B "      <interval>
.B "        <min></min>
.B "        <max></max>
.B "      </interval>
.B "    </verify>
.B "    <notify>
.B "      <count></count>
.B "      <interval></interval>
.B "      <retries></retries>
.B "    </notify>
.B "  </arp>
.fi
.PP
.TP
.B count
This element can specify the number of ARP packets send.
.TP
.B retries
This element specify the number of retries while sending ARP packages.
.TP
.B interval
This element specify the delay between each ARP package in milliseconds. For
\fB<verify>\fR it can be a range specified via \fB<min>\fR and \fB<max>\fR.

.PP
.\" --------------------------------------------------------
.SH DHCP4 SUPPLICANT OPTIONS
The DHCP4 client can be configured through the options listed below.
All of them must be nested in the config node like this:
.PP
.nf
.B "  <addrconf>
.B "    <dhcp4>
.I "      ...
.B "    </dhcp4>
.B "  </addrconf>
.fi

or inside a device name context like:
.PP
.nf
.B "  <addrconf>
.B "    <dhcp4>
.B "      <device name=\(dqeth0\(dq >
.I "        ...
.B "      </device>
.B "    </dhcp4>
.B "  </addrconf>
.fi

.TP
.B create-cid
Specifies the standard client-id type to use:
.IP
.TS
box;
l|l|l
lb|lb|l.
Type	Alias	Description
=
rfc4361	dhcp6	use 0xff as type, followed by DHCPv6 IAID and DUID
rfc2132	hwaddr	use hardware/link layer type, followed by the address
disable	none	disables creation (custom client-id is send if given)
.TE
.PP
When the interface configuration does not provide an explicit client-id
(DHCLIENT_CLIENT_ID in ifcfg files or <client-id> xml config/policy node),
wicked will generate a DHCPv4 client-id as specified in this option.

When set to \fBrfc4361\fR, wicked will create a DHCPv4 client-id using the
DHCPv6 IAID and DUID (see <dhcp6><default-duid> option).
This new rfc4361 client-id is required to perform DDNS updates for ipv4 (A)
and ipv6 (AAAA) address records in the same DNS zone (domain) and mandatory
to use on infiniband interfaces.

When set to \fBrfc2132\fR, wicked will create a DHCPv4 client-id using the
network interface hardware-type and address. This may be needed to maintain
compatibility to e.g. DHCPv4 servers with static leases explicitly bound to
a \fBrfc2132\fR client-id or having trouble to provide a lease to a dhcp4
client using the new and longer \fBrfc4361\fR client-id.

When set to \fBdisable\fR, no client-id is created and send by default (except
when the interface config request to acquire a lease contains a custom/explicit one).

When unspecified, the default behavior depends on the --enable-dhcp4-rfc4361-cid
(default) and --disable-dhcp4-rfc4361-cid configure options, allowing to revert
to use the old \fBrfc2132\fR client-id at compile time, i.e. to prereserve
behavior like in older releases, but permit to change to enable the new rfc4361
client-id default at runtime.

Note, that a change of the client-id usually causes to disassociate the lease
and/or DNS records, because it is used in the DHCID DNS record (see rfc4701).

.TP
.B vendor-class
Specifies the string to be used as the vendor-class option in the DHCP
request. By default, no vendor-class option is sent.

.TP
.B lease-time
Specifies the lease time to request in the DHCP request, in seconds. This also
caps the lease time that can be requested in an interface configuration;
any lease-time specified there will be silently limited to what was
specified in the global configuration file. The following will set the default
lease time to one hour:
.IP
.B "  <lease-time>3600</lease-time>
.PP

.TP
.B ignore-server
Using the \fBip\fB attribute of this element, you can specify the
IP or HW address (currently ethernet devices only) of a faulty DHCP
server that should be ignored:
.IP
.B "  <ignore-server ip=\(dq192.168.8.1\(dq />
.B "  <ignore-server mac=\(dq52:54:00:02:c2:67\(dq />

.TP
.B prefer-server
Specify a preferred DHCP server, together with a numeric value indicating its
preference. Again, the address of the server is specified using the
\fBip\fP or mac attribute.
.IP
The numeric preference value is given by the \fBweight\fP,
and should range from -1 to 100. Higher numbers indicate a higher preference.
A negative value will cause the server to be ignored. If a response from
a server with a weight of 100 is received, it will be selected immediately.
Otherwise, the supplicant will wait for about one second, and select the
server with the highest preference afterwards.
.IP
The special keywords \fBnever\fP and \fBalways\fP correspond to -1 and
100, respectively. If no \fBweight\fP attribute is given, it defaults to
\fBalways\fP (100).
.IP
The following example will ignore 192.168.8.1, always use the information from
192.168.8.10 if available, and fall back to 192.168.8.7 if not:
.IP
.nf
.B "  <prefer-server ip=\(dq192.168.8.1\(dq  weight=\(dqnever\(dq />
.B "  <prefer-server mac=\(dq02:03:04:05:06:07\(dq weight=\(dqalways\(dq />
.B "  <prefer-server ip=\(dq192.168.8.7\(dq  weight=\(dq50\(dq />
.fi

.TP
.B allow-update
Specify the list of system services that \fBwicked\fP will configure based
on the DHCP lease received. For the syntax of this element, please refer
to the description of \fBdefault-allow-update\fP above. \fBdhcp4\fR supports
all update facilities.
.TP
.B route-options
Specify a space separated list of routing options to request from dhcp4 server.
.IP
.TS
box;
l|l|l
lb|lb|lb.
Name		Alias	Description
=
classless	csr	RFC 3442 classless static route option 121
ms-classless	mscsr	MS classless static route option code 249 (pre RFC 3442)
static-routes	class	Obsolete option 33 requesting static class routes
.TE

.IP
The RFC 3442 classless static route option provides all routes with a netmask,
includes the default routers and has priority over other routing options.
By default, wicked requests classless (121) as well as class static routes (33)
and the default routers option (3) (when enabled in allow-update) to be
compatible to old servers or servers not configured to provide classless,
but only a default router option.

.TP
.B define
Permits to define list of custom dhcp \fBoption\fRs not covered by wicked yet.
The dhcp4 option codes are 8-bit (1..254) bytes.

For non-standard options, it is recommended is to use the DHCPv4 private option
code range 224 to 254, see \fBRFC3942\fR (section 4), \fBRFC 2939\fR and
\fBwww.iana.org/assignments/bootp-dhcp-parameters\fR to avoid conflicts with
options that are or may be defined and implemented later.

To request support for a specific standard option, issue a feature request
at https://fate.suse.com/ or https://features.opensuse.org/ (hermes).
See \fBCUSTOM DHCP OPTIONS\fR section for more details.

.TP
.B arp
This element can be used to control ARP verify and ARP notify settings. See
\fBARP CONFIGURATION OPTIONS\fR for more info.

.PP
.\" --------------------------------------------------------
.SH DHCP6 SUPPLICANT OPTIONS
The DHCP6 client can be configured through the options listed below.
All of them must be nested in the config node like this:
.PP
.nf
.B "  <addrconf>
.B "    <dhcp6>
.I "      ...
.B "    </dhcp6>
.B "  </addrconf>
.fi

or inside a device name context like:
.PP
.nf
.B "  <addrconf>
.B "    <dhcp6>
.B "      <device name=\(dqeth0\(dq >
.I "        ...
.B "      </device>
.B "    </dhcp6>
.B "  </addrconf>
.fi

.TP
.B default-duid
DHCPv6 uses a so-called DUID to identify a DHCP client and an IAID, that
refers to an interface.
.br
DHCPv4 now also defaults to construct its client-id using the DHCPv6 IAID
and DUID as well (see <dhcp4><create-cid> option).
.br
By default, \fBwickedd-dhcp6\fP will try to generate a DUID based on the
link layer address (MAC) of the device and time (DUID-LLT).

The \fBdefault-duid\fP element permits to override this behavior and either
specify an explicit DUID as a string of colon separated hex octets, e.g.:
.nf
.B "      <default-duid>00:03:00:01:02:00:00:00:00:02</default-duid>
.fi
or an advise which duid type to construct or import expressed in a child
element:
.nf
.B "      <default-duid><\fIduid type element\fB/></default-duid>
.fi
using one of the following duid type elements:
.RS
.TP
\fBllt\fR, DUID type 1, Link-layer address plus time:
.RS
.PP
Permits to specify the link/hardware type and address in its \fBhardware\fR
and \fBaddress\fR elements, e.g.:
.nf
.B "        <llt>
.B "          <hardware>ethernet</hardware><address>02:00:00:00:00:02</address>
.B "        </llt>
.fi
Without arguments, wicked will create the duid-llt using the hardware type
and address of the actual device that requests a duid first.
The time inside of the DUID is set automatically to the duid creation time.
.RE
.TP
\fBen\fR, DUID type 2, Vendor Based on IANA Enterprise Number:
.RS
.PP
Permits to specify a vendor type DUID-EN based on the IANA assigned enterprise
number and an machine identifier specified in the \fBenterprise-number\fR and
\fBidentifier\fR elements, e.g. using IANA number 7057 assigned to SUSE:
.nf
.B "        <en>
.B "          <enterprise-number>7057</enterprise-number>
.B "          <identifier>02:00:00:00:00:02</identifier>
.B "        </en>
.fi
.RE

.TP
\fBll\fR, DUID type 3, Link-layer address (without time):
.RS
Usage is as for type 1 duid llt, the duid does not contain a time.
.RE
.TP
\fBuuid\fR, DUID type 4, UUID-Based Unique Identifier:
.RS
Permits to specify the effective UUID to use, e.g.:
.nf
.B "        <uuid>80d732e7-b8dc-45ef-bdae-f9f5e6925cef</uuid>
.fi
or import it from /etc/machine-id file:
.nf
.B "        <uuid><machine-id/></uuid>
or using an explicit path to the machine-id file:
.B "        <uuid><machine-id>/etc/machine-id</machine-id></uuid>
.fi
or the DMI product id (problematic, may be not available or not unique):
.nf
.B "        <uuid><dmi-product-id/></uuid>
.fi
Without arguments, wicked will try to import the machine-id with a fallback
to the DMI product id when no machine-id file exists.
.RE
.RE
.IP
Additionally, the \fBdefault-duid\fR element supports a \fBper-device\fP attribute.
When enabled via \fB<default-duid per-device="true"/>\fR, wicked changes to a
non-standard behavior and maintains a separate duid for each device instead of the
same ("default") DUID for all interfaces and a \fBper device/interface IAID\fR.

This permits to workaround some special cases, where the hosts should appear to the
server using multiple identities, that is to behave as multiple machines instead as
one with multiple interfaces.

.IP
The \fBwickedd\fP daemons store the generated DUIDs in \fB@wicked_statedir@/duid.xml\fP
file. The \fBwicked duid\fR utility command permits to review and modify the duid as
needed.

.B Note: When you change the DUID, make sure to restart the \fIwickedd\fB service.
.PP
.\"
.\" Not documented, not fully working:
.\"  user-class
.\"  vendor-class
.\"  vendor-opts
.\"

.TP
.B lease-time
Specifies the lease time to request in the DHCP request, in seconds. This also
caps the lease time that can be requested in an interface configuration;
any lease-time specified there will be silently limited to what was
specified in the global configuration file. The following will set the default
lease time to one hour:
.IP
.B "  <lease-time>3600</lease-time>
.PP

.TP
.B release-retransmits
Specifies the number of lease release retransmissions in the range 1..5.
Default is to send up to 5 (REL_MAX_RC) retransmissions.

.TP
.B info-refresh-time
Specifies a different default for the RFC4242 info refresh time used when the
dhcp6 server does not provide any and permits also to adjust the acceptable
time range in the \fBmin\fR and \fBmax\fR attributes, e.g.:
.IP
.B "  <info-refresh-time min="600" max="604800">86400</info-refresh-time>
.PP

.TP
.B prefer-server
Specify a preferred DHCP server, together with a numeric value indicating its
preference. The server is identified using its DUID, which has to be specified
via the \fBid\fP attribute.
.IP
The numeric preference value is given by the \fBweight\fP,
and should range from -1 to 255.
Higher numbers indicate a higher preference.
A negative value will cause the server to be ignored. If a response from
a server with a weight of 255 is received, it will be selected immediately.
Otherwise, the supplicant will wait for about one second, and select the
server providing an offer with the best request match and the highest preference afterwards.
.IP
The special keywords \fBnever\fP and \fBalways\fP correspond to -1 and
255, respectively. If no \fBweight\fP attribute is given, it defaults to
\fBalways\fP (255).
.IP
The following example will ignore DHCP offers from the first server,
always use the information from the second (if available), and fall back
to the third if not:
.IP
.nf
.B "  <prefer-server id=\(dq00:03:00:01:02:03:04:05:06:07\(dq weight=\(dqnever\(dq />
.B "  <prefer-server ip=\(dq2001:DB8::1\(dq weight=\(dqalways\(dq />
.B "  <prefer-server ip=\(dq2001:DB8::2\(dq weight=\(dq50\(dq />
.fi

.TP
.B allow-update
Specify the list of system services that \fBwicked\fP will configure based
on the DHCP lease received. For the syntax of this element, please refer
to the description of \fBdefault-allow-update\fP above. \fBDHCPv6\fR allows
the following update facilities:
.IP
.TS
box;
l|l
lb|lb.
Name	Description
=
hostname	system hostname (fqdn)
dns	update resolv.conf or dns server (via netconfig)
ntp	NTP servers (via netconfig)
sip	SIP client (optional, no netconfig module implemented)
nis	NIS client (optional, no netconfig module, not supported by ypbind)
tz	posix time zone (no netconfig module implemented)
boot	boot-url used in the initrd
.TE

.IP
Note: \fBDHCPv6\fR protocol does not provide any options to request routing
settings, which are applied via a router advertisement (\fBIPv6 RA\fR).

.TP
.B define
Permits to define list of custom dhcp \fBoption\fRs not covered by wicked yet.
The dhcp6 option codes are 16-bit (1..65534) integers.

See \fBhttp://www.iana.org/assignments/dhcpv6-parameters\fR and \fBRFC7227\fR.

To request support for a specific standard option, issue a feature request
at https://fate.suse.com/ or https://features.opensuse.org/ (hermes).
See \fBCUSTOM DHCP OPTIONS\fR section for more details.

.TP
.B Note:
The DHCPv6 protocol does not define any routing options, which are applied
by IPv6 Router Advertisement (RA) or require static configuration.
The current NIS / ypbind implementation on linux does supported IPv6 at all.

.PP
.\" --------------------------------------------------------
.SH CUSTOM DHCP OPTIONS
A custom \fBoption\fR defines a \fBname\fR for a dhcp option \fBcode\fR and
a format how to interpret raw data of the dhcp option. This option definition is
used to parse and format lease-xml files, (format) leaseinfo dump files and the
\fBname\fR can be used to request options (oro alias option-request-option).

The \fBname\fR has to be a valid keyword and is restricted to a word of 1..63
alphanumeric and \(dq-\(dq characters (same to a hostname without any dots).

The current implementation supports the following simple \fBtype\fRs (scalars):
.TP
.BR opaque\ [fixed-length=\(dq<length\ in\ bytes>\(dq\ |\ embedded-length=\(dq1|2|uint8|uint16\(dq]
Opaque data or not printable string formatted as a hex-string (xx:xx:xx) with
variable length. The \fBfixed-length\fR attribute permits adjust it to a \\0
padded fixed-length data field and the \fBembedded-length\fR attribute to
interpret the initial 1 (uint8) or 2 (uint16) bytes as data length (RFC7227).
.TP
.BR string\ [fixed-length=\(dq<length\ in\ bytes>\(dq\ |\ embedded-length=\(dq1|2|uint8|uint16\(dq]
A \fBprintable\fR variable-length string (without a \\0 null-termination).
The \fBfixed-length\fR attribute permits to adjust it to a \\0 padded
fixed-length string and the \fBembedded-length\fR attribute to interpret
the initial 1 (uint8) or 2 (uint16) bytes as the string length (RFC7227).
.TP
.BR bool
A single byte value interpreted as boolean (0 is \(dqfalse\(dq, otherwise \(dqtrue\(dq).
.TP
.BR int8\ |\ int16\ |\ int32\ |\ int64\ uint8\ |\ uint16\ |\ uint32\ |\ uint64\ [notation=\(dqhex\(dq]
A signed or unsigned integer in decimal or optionally, in a 0x.. hex notation.
.TP
.BR ipv4-address\ |\ ipv6-address
IPv4 and IPv6 address types
.TP
.BR ipv4-prefix\ |\ ipv6-prefix
An RFC3442 / RFC7227 prefix (destination descriptor) with compact encoded
prefix-length byte followed by the significant octets of the network address.
.PP
These simple \fBtypes\fR can be combined together in \fBstruct\fRs and \fBarray\fRs.

A \fBstruct\fRs consists of one or more \fBmember\fRs, which contain a \fBname\fR
and a member \fBtype\fR, \fBstruct\fR or \fBarray\fR. The last member in a \fBstruct\fR
is allowed to contain be variable length type.
An array contains an element \fBname\fR and fixed-length \fBtype\fR or \fBstruct\fR.

A simple type can be specified in the node name (<string/>) or in the data of the type
node (<type>string</type>).

Examples:
.PP
.nf
.I "  <!--
.I "       global or device specific definitions of dhcp4/dhcp6 options
.I "       under <config><addrconf><dhcp4> or <config><addrconf><dhcp6>
.I "  -->
.B "  <define>
.B "    <option>
.B "      <code>224</code>
.B "      <name>foo-server</name>
.B "      <type>ipv4-address</type>
.B "    </option>
.B "    <option>
.B "      <code>225</code>
.B "      <name>foo-path</name>
.B "      <string/>
.B "    </option>
.B "    <option>
.B "      <code>250</code>
.B "      <name>test-cls-routes</name> <!-- RFC3442 classless route format -->
.B "      <array>
.B "        <name>route</name>
.B "        <struct>
.B "          <member>
.B "            <name>destination</name>
.B "            <ipv4-prefix/>
.B "          </member>
.B "          <member>
.B "            <name>gateway</name>
.B "            <ipv4-address/>
.B "          </member>
.B "        </struct>
.B "      </array>
.B "    </option>
.B "    <option>
.B "      <code>251</code>
.B "      <name>six-addresses</code>
.B "      <array>
.B "        <name>ip</name>
.B "        <ipv6-address/>
.B "      </array>
.B "    </option>
.B "  </define>
.fi

To test the option definition, the \(dqwicked test\(dq call can be used:
.PP
.nf
.B " wicked test dhcp4 --request - eth1 <<EOF
.I "  <request type="offer">
.I "    <request-options>
.I "      <option>224</option>
.I "      <option>test-cls-routes</option>
.I "    </request-options>
.I "  </request>
.B " EOF
.fi
before adding the option requests to the ifcfg or xml configuration and
restarting wickedd (\(dqrcwickedd restart\(dq) to apply to the supplicant.

.PP
.\" --------------------------------------------------------
.SH SERVER ONLY OPTIONS
.TP
.B teamd
.IP
The \fB<teamd>\fP element permits to enable or disable teamd support
(inclusive discovery of team device details) in its \fB<enable>\fP
sub-element. Disabled by default, \fBserver.xml\fP config enables it.
Further, it permits to specify the control interface to communicate
with teamd in the \fB<ctl>\fP sub-element, using the following options:
.IP
.TS
box;
l|l
lb|l.
Option	Description
=
detect-once	detect the control interface to use, once (\fBdefault\fP)
detect	detect the control interface to use in each call
dbus	communicate directly with teamd via dbus
unix	use unix socket control interface via teamdctl tool
.TE
.PP
.TP
.B bonding
.IP
The \fB<bonding>\fP element permits to specify whether to use netlink or
sysfs to configure the bonding in its \fB<ctl>\fP sub-element:
.IP
.TS
box;
l|l
lb|l.
Option	Description
=
netlink	configure bonding via netlink (default)
sysfs	configure bonding via sysfs (the old way)
.TE
.PP
.\" --------------------------------------------------------
.SH EXTENSIONS
The functionality of \fBwickedd\fP can be extended through
external commands and shell scripts. All of these extensions
are declared in \fBserver.xml\fP, and all of them follow the same pattern.
.PP
.TP
Script extensions
Scripts are specified via the \fB<script>\fP element, which needs to provide
a \fBname\fP attribute and a \fBcommand\fP attribute. Again, the name serves
as an identifier, while the command specifies the command to be invoked.
\fBwicked\fP comes with a (simple) parser for this, which splits up this command
into a argument array which is passed to \fBexecve\fP(2) eventually.
.IP
An example would look like this:
.IP
.nf
.B "  <script name=\(dqinstall\(dq
.B "          command=\(dq@wicked_extensionsdir@/hostname install\(dq/>
.fi
.IP
When defining script extensions, it is possible to define additional environment
variables that get passed to the script. This mechanism is explained in more
detail below.
.PP
Extensions are always grouped under a parent element. The following configuration
elements can contain extensions:
.\" --------------------------------------------------------
.SS System updaters
These specify extensions for managing files like \fBresolv.conf\fP, or the system
hostname, based on information contained through an address configuration protocol
like DHCP. The configuration element must have a \fBname\fP attribute that specifies
the system service to configure, and include extensions for backing up the current
configuration, for installing new settings, and for restoring the backup.
.PP
The configuration for the hostname updater might look like this:
.PP
.nf
.B "  <system-updater name="hostname">
.B "    <script name=\(dqbackup\(dq command=\(dq@wicked_extensionsdir@/hostname backup\(dq/>
.B "    <script name=\(dqrestore\(dq command=\(dq@wicked_extensionsdir@/hostname restore\(dq/>
.B "    <script name=\(dqinstall\(dq command=\(dq@wicked_extensionsdir@/hostname install\(dq/>
.B "    <script name=\(dqinstall\(dq command=\(dq@wicked_extensionsdir@/hostname remove\(dq/>
.B "  </system-updater>
.fi
.PP
Currently, \fBwicked\fP supports \fBgeneric\fP and \fBhostname\fP system updaters.
The \fBgeneric\fP updater operates on data which can be set via \fBnetconfig\fP (refer
to \fBnetconfig\fP(7). The \fBhostname\fP updater sets the system hostname.
.PP
This extension class supports shell scripts only.
.\" --------------------------------------------------------
.SS Firmware discovery
Some platforms support iBFT or similar mechanisms to provide the configuration for
a network device through the firmware (so that it's possible to boot off that device).
In order to support these mechanisms, \fBwicked\fP supports extensions to discover such
configuration from a firmware.
.PP
.nf
.B "  <netif-firmware-discovery name="ibft">
.B "    <script name="show-config"  command="@wicked_extensionsdir@/ibft" />
.B "    <script name="list-ifnames" command="@wicked_extensionsdir@/ibft -l" />
.B "  </netif-firmware-discovery>
.fi
.PP
When looking for firmware interface configuration, \fBwicked\fP will invokes these scripts
for all defined/selected firmware extension types in turn and parses their output.
.TP
.B show-config
The script command is expected to return XML output that contain zero or more
.B <interface>
nodes with the network interface configuration.
.TP
.B list-ifnames
The script command is expected to return lines with space separated list of
interface names the firmware configures (incl. virtual interfaces like vlans).
.PP
This extension class supports shell scripts only. The \fBwicked-firmware\fP(8) command allows
to list available extensions, the interfaces they configure and maintenance actions such as
to enable/disable the execution of the firmware-discovery scripts.
.PP
.\" --------------------------------------------------------
.SH "SEE ALSO"
.BR wickedd (8),
.BR wicked-firmware (8),
.BR netconfig (8),
.BR RFC3942
.SH COPYRIGHT
Copyright (C) 2014-2023 SUSE LLC
.SH BUGS
Please report bugs as described at <@PACKAGE_BUGREPORT@>
.SH AUTHORS
Olaf Kirch
Karol Mroz
Nirmoy Das
Rubén Torrero Marijnissen
Marius Tomaschewski
