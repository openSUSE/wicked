
<!-- =================================================
     Basic network interface information
     ================================================= -->
<define name="network-interface" class="dict">
 <!-- An address assigned to a network interface -->
 <define name="assigned-address" class="dict">
   <local type="network-address-prefix" />
   <peer type="network-address"/>
   <anycast type="network-address"/>
   <broadcast type="network-address"/>
   <label type="string"/>

   <cache-info class="dict">
     <valid-lifetime type="uint32" />
     <preferred-lifetime type="uint32" />
   </cache-info>

   <!-- This is the addrconf method that owns this address -->
   <owner type="builtin-addrconf" />
 </define>

 <define name="assigned-address-list" class="array" element-type="assigned-address" />

 <!-- A route assigned to a network interface -->
 <define name="assigned-route" class="dict">
   <destination  type="network-address-prefix"/>
   <pref-source  type="network-address"/>
   <priority     type="uint32" />
   <flags        type="builtin-route-flag-mask" />
   <realm        type="uint32" />
   <mark         type="uint32" />
   <tos          type="uint32" />

   <nexthop class="dict">
     <gateway    type="network-address"/>
     <device     type="string" />
     <weight     type="uint32" />
     <realm      type="uint32" />
     <flags      type="builtin-route-nh-flag-mask" />
   </nexthop>

   <kern class="dict">
     <table      type="builtin-route-table"/>
     <type       type="builtin-route-type"/>
     <scope      type="builtin-route-scope"/>
     <protocol   type="builtin-route-protocol"/>
   </kern>

   <metrics class="dict">
     <lock       type="builtin-route-metrics-lock-mask" />
     <mtu        type="uint32" />
     <window     type="uint32" />
     <rtt        type="uint32" />
     <rttvar     type="uint32" />
     <ssthresh   type="uint32" />
     <cwdn       type="uint32" />
     <advmss     type="uint32" />
     <reordering type="uint32" />
     <hoplimit   type="uint32" />
     <initcwnd   type="uint32" />
     <features   type="uint32" />
     <rto-min    type="uint32" />
     <initrwnd   type="uint32" />
   </metrics>

   <!-- This is the addrconf method that owns this address -->
   <owner type="builtin-addrconf" />
 </define>

 <define name="assigned-route-list" class="array" element-type="assigned-route" />

 <!-- Generic per-address family settings -->
 <define name="af-info" class="dict">
    <enabled type="boolean" />
    <forwarding type="boolean" />
 </define>

 <!-- =====================================
      Description
      ===================================== -->
 <description>
   This defines the state of a network interface from the kernel's perspective.

 </description>

 <!-- =====================================
      Properties of an interface start here
      ===================================== -->
 <name type="string" description="The kernel name of the interface" />

 <!-- These bits must match the definitions in netinfo.h -->
 <status type="builtin-ifflags" description="The interface status flags. NOTE: These are not the kernel flags"/>

 <link-type type="builtin-iftype" description="The link-layer type of this interface"/>

 <define name="client-info-type" class="dict">
   <description>
    This can be used by the client to store a "fingerprint" of the configured state.
    This data is not interpreted by the server.
   </description>
   <config-origin type="string"/>
   <config-uuid type="uuid-type"/>
   <state type="string"/>
 </define>

 <client-info type="client-info-type" />

 <define name="client-state-type" class="dict">
   <description>
    This is used by the server and it's client to store the initial state of an interface,
    ifup/ifreload related timestamps and allowed ifdown's target state of an given interface.
   </description>
   <persistent type="boolean" constraint="required"/>
   <init-state type="builtin-client-state"/>
   <init-time type="string"/>
   <last-time type="string"/>
 </define>

 <client-state type="client-state-type" />

 <index type="uint32" description="The interface index. The index is also used in the DBus name of the DBus netif object"/>
 <metric type="uint32"/>
 <txqlen type="uint32"/>
 <mtu type="uint32"/>
 <alias type="string"/>
 <master type="string"/>

 <!-- General ipv4 and ipv6 specific settings -->
 <ipv4 type="af-info"/>
 <ipv6 type="af-info"/>

 <addresses type="assigned-address-list" description="The list of network addresses currently assigned to the interface"/>
 <routes type="assigned-route-list" description="The list of network routes currently assigned to the interface"/>
</define>


<!-- =================================================
     List of all network interfaces.

     This service currently doesn't have any methods, but
     we may add some in the future.
     For instance, we could have a service that maps one
     or more interface attributes to an interface object
     path. This could be used to use other means of interface
     identification that what we usually have.
     ================================================= -->
<service name="interface-list" interface="org.opensuse.Network.InterfaceList">
  <method name="identifyDevice">
    <arguments>
      <namespace type="string"/>
      <query class="dict"/>
    </arguments>
    <return>
      <string/>
    </return>
  </method>
</service>

<!-- =================================================
     Generic dbus interface to a single network interface

     Note that link-layer specific properties and methods
     are defined by overlay DBus services, such as
     org.opensuse.Network.Ethernet, etc.

     Address configuration services are provided by yet
     another set of interfaces that are attached to a network
     interface.
     ================================================= -->
<service name="interface" interface="org.opensuse.Network.Interface" object-class="netif">
  <define name="properties" type="network-interface"/>

  <define name="callback-info" class="dict">
   <!-- We can return one or more these callback elements in a single dict -->
   <description>
    Methods for network or modem devices that are unable to complete the request
    immediately (for instance, a DHCP supplicant needs to broadcast for a lease, etc),
    the server will return callback information. This is a list of one or more
    callbacks to wait for.
   </description>
   <callback class="dict">
     <uuid type="uuid-type"/>
     <event type="string"/>
   </callback>
  </define>

  <define name="link-request" class="dict">
   <description>
    This describes the requested change(s) to the link layer. It is passed to the
    linkUp() method.

    For keys that are omitted, the existing setting of the network interface
    remains unchanged.
   </description>
   <status type="builtin-ifflags"/>

   <metric type="uint32"/>
   <mtu type="uint32"/>
   <txqlen type="uint32"/>
   <alias type="string"/>

   <ipv4 type="network-interface:af-info"/>
   <ipv6 type="network-interface:af-info"/>
  </define>

  <define name="addrconf-lease" class="dict">
    <lease class="dict">
      <state type="builtin-addrconf-state"/>
    </lease>
  </define>

  <method name="linkUp">
    <description>
     This method initiaties link negotiation. This may include link-specific activities;
     for instance, when bringing up a wireless device, this will start wireless
     authentication.

     When the link negotiation is complete by the time this method is done,
     we will return an empty callback-info dict. If the link negotiation is still
     in process, a callback-info dict is returned.
    </description>
    <arguments>
      <request type="link-request">
        <meta:mapping document-node="/link" skip-unless-present="false" />
      </request>
    </arguments>
    <return>
      <callback-info/>
    </return>
  </method>

  <method name="linkDown">
    <description>
     This method takes the link down by clearing its IFF_UP flag.
    </description>
    <return>
      <callback-info/>
    </return>
  </method>

  <method name="linkAuth">
    <description>
     Do not use
    </description>
    <arguments>
      <!-- to be defined -->
    </arguments>
  </method>

  <method name="networkChange">
    <description>
     Do not use
    </description>
    <arguments>
      <!-- to be defined -->
    </arguments>
    <return>
      <builtin-ifflags/>
    </return>
  </method>

  <define name="intrinsic-lease" class="dict">
    <state type="builtin-addrconf-state"/>
    <addresses type="network-interface:assigned-address-list" />
    <routes type="network-interface:assigned-route-list" />
    <hostname type="string" />

    <!-- FIXME: add support for resolver etc -->
  </define>

  <method name="installLease">
    <arguments>
      <arg type="intrinsic-lease"/>
    </arguments>
  </method>

  <method name="setClientState">
    <description>
      This method can be used by client to set:
	* initial state of an interface
	* time of the initial ifup configuration
	* time of the last ifup configuration
	* persistent flag - allowing/disallowing ifdown operation
      These values are permanent and could be stored in a filesystem.
    </description>
    <arguments>
      <arg type="network-interface:client-state-type" />
    </arguments>
  </method>

  <method name="setClientInfo">
    <description>
      This method can be used by clients to record the state of a device
      configuration. The argument includes a string describing the state,
      and a hash of the configuration data used in bringing up the device.
    </description>
    <arguments>
      <arg type="network-interface:client-info-type" />
    </arguments>
  </method>

  <method name="linkMonitor">
    <description>
      This method sets up the device for monitoring, so that link status
      changes (for Ethernet interfaces) or changes in the wireless
      neighborhood (for Wireless interfaces) can be reported via
      signals.

      This method is primarily used by network-nanny.
    </description>
  </method>

  <!-- Signals emitted by this interface -->
  <signal name="deviceCreate">
    <description>
     This signal is emitted whenever a new device is created or discovered.
    </description>
  </signal>
  <signal name="deviceDelete">
    <description>
     This signal is emitted whenever a device is destroyed or otherwise disappeared from the system
     (for instance, by hot removal).
    </description>
  </signal>
  <signal name="deviceUp">
    <description>
     This signal is emitted whenever a device's IFF_UP flag is set.
    </description>
  </signal>
  <signal name="deviceDown">
    <description>
     This signal is emitted whenever a device's IFF_UP flag is cleared.
    </description>
  </signal>
  <signal name="linkUp">
    <description>
     This signal is emitted whenever a device completes link negotiation (ie when its IFF_UP and
     IFF_LOWER_UP flag is set)
    </description>
  </signal>
  <signal name="linkDown">
    <description>
     This signal is emitted whenever a device loses its link (ie when its IFF_UP and/or
     IFF_LOWER_UP flag is cleared).
    </description>
  </signal>
  <signal name="linkAssociated">
    <description>
     Emitted whenever a device (re-)associates with a different access point.
     Used by wireless devices.
    </description>
  </signal>
  <signal name="linkAssociationLost">
    <description>
     Emitted whenever a device loses its association with an access point.
    </description>
  </signal>
  <signal name="linkScanUpdated">
    <description>
     Emitted by wireless devices when a scan completed and the set of visible APs or
     networks changed.
    </description>
  </signal>
  <signal name="networkUp">
    <description>
     This signal shadows linkUp, and may be removed in the future.
    </description>
  </signal>
  <signal name="networkDown">
    <description>
     This signal shadows linkDown, and may be removed in the future.
    </description>
  </signal>
  <signal name="addressAcquired">
    <description>
     Emitted whenever an address was acquired through an addrconf service.

     Addrconf services like dhcp4 or dhcp6 are unable to grant a requested lease immediately.
     In response to a requestLease() call, they will return callback information containing
     a uuid, and the event name addressAcquired. Once the address negotiation with the DHCP
     server succeeds, wickedd will emit an addressAcquired event with the uuid specified in
     the callback info.

     If the DHCP supplicant is unable to obtain the requested lease, an addressLost signal is
     generated instead.
    </description>
  </signal>
  <signal name="addressReleased">
    <description>
     Emitted whenever an address previously acquired through an addrconf service is released.

     Addrconf services like dhcp4 or dhcp6 should release their leases gracefully when the
     interface is taken down.
     In response to a dropLease() call, they will return callback information containing
     a uuid, and the event name addressReleased. Once the we have successfully informed
     the DHCP server and released the lease, wickedd will emit an addressReleased event with
     the uuid specified in the callback info.

     This signal is also emitted spontaneously when an addrconf service released a lease.
     For instance, if an interface is taken down manually using "ifconfig down", the DHCP
     supplicant will discard the lease it held for this interface, and subsequently,
     an addressReleased() event is emitted.
    </description>
  </signal>
  <signal name="addressLost">
    <description>
      Emitted whenever an addrconf service failed to renew a previously acquired lease.
    </description>
  </signal>
</service>
