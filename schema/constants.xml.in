<!-- Built-in internal interface types -->
<define name="builtin-iftype" type="uint32" constraint="enum">
  <@@IFTYPE_NAME@@ value="@@IFTYPE_VALUE@@"/>
</define>

<!-- Built-in interface hardware types -->
<define name="builtin-hwtype" type="uint16" constraint="enum">
  <@@ARPHRD_NAME@@ value="@@ARPHRD_VALUE@@"/>
</define>

<!-- Built-in address configuration classes -->
<define name="builtin-addrconf" type="uint32" constraint="enum">
  <@@ADDRCONF_MODE_NAME@@ value="@@ADDRCONF_MODE_VALUE@@"/>
</define>

<!-- Built-in addrconf states (used in addrconf leases) -->
<define name="builtin-addrconf-state" type="uint32" constraint="enum">
  <@@ADDRCONF_STATE_NAME@@ value="@@ADDRCONF_STATE_VALUE@@"/>
</define>

<!-- Built-in dhcp6 run/configuration mode types -->
<define name="builtin-dhcp6-mode" type="uint32" constraint="enum">
  <@@DHCP6_MODE_NAME@@ value="@@DHCP6_MODE_VALUE@@"/>
</define>

<!-- Built-in interface status flags -->
<define name="builtin-ifflags" type="uint32" constraint="bitmap">
  <@@IFFLAG_NAME@@ bit="@@IFFLAG_VALUE@@"/>
</define>

<!-- Built-in interface state values -->
<define name="builtin-client-state" type="uint32" constraint="enum">
  <@@CLIENT_STATE_NAME_NAME@@ value="@@CLIENT_STATE_NAME_VALUE@@"/>
</define>

<!-- The same as above, except as a bitmask (to express the list of supported modes) -->
<define name="builtin-client-state-mask" type="uint32" constraint="bitmap">
  <@@CLIENT_STATE_NAME_NAME@@ bit="@@CLIENT_STATE_NAME_VALUE@@"/>
</define>

<!-- Built-in wireless types -->
<define name="builtin-wireless-mode" type="uint32" constraint="enum">
  <@@WIRELESS_MODE_NAME@@ value="@@WIRELESS_MODE_VALUE@@"/>
</define>
<define name="builtin-wireless-security" type="uint32" constraint="enum">
  <@@WIRELESS_SECURITY_NAME@@ value="@@WIRELESS_SECURITY_VALUE@@"/>
</define>
<define name="builtin-wireless-auth" type="uint32" constraint="enum">
  <@@WIRELESS_AUTH_NAME@@ value="@@WIRELESS_AUTH_VALUE@@"/>
</define>
<define name="builtin-wireless-auth-algo" type="uint32" constraint="enum">
  <@@WIRELESS_AUTH_ALGO_NAME@@ value="@@WIRELESS_AUTH_ALGO_VALUE@@"/>
</define>
<define name="builtin-wireless-cipher" type="uint32" constraint="enum">
  <@@WIRELESS_CIPHER_NAME@@ value="@@WIRELESS_CIPHER_VALUE@@"/>
</define>
<define name="builtin-key-mgmt" type="uint32" constraint="enum">
  <@@WIRELESS_KEY_MGMT_NAME@@ value="@@WIRELESS_KEY_MGMT_VALUE@@"/>
</define>
<define name="builtin-eap-method" type="uint32" constraint="enum">
  <@@WIRELESS_EAP_METHOD_NAME@@ value="@@WIRELESS_EAP_METHOD_VALUE@@"/>
</define>


<!-- The same as above, except as a bitmask (to express the list of supported modes) -->
<define name="builtin-wireless-security-mask" type="uint32" constraint="bitmap">
  <@@WIRELESS_SECURITY_NAME@@ bit="@@WIRELESS_SECURITY_VALUE@@"/>
</define>
<define name="builtin-wireless-auth-mask" type="uint32" constraint="bitmap">
  <@@WIRELESS_AUTH_NAME@@ bit="@@WIRELESS_AUTH_VALUE@@"/>
</define>
<define name="builtin-wireless-auth-algo-mask" type="uint32" constraint="bitmap">
  <@@WIRELESS_AUTH_ALGO_NAME@@ bit="@@WIRELESS_AUTH_ALGO_VALUE@@"/>
</define>
<define name="builtin-wireless-cipher-mask" type="uint32" constraint="bitmap">
  <@@WIRELESS_CIPHER_NAME@@ bit="@@WIRELESS_CIPHER_VALUE@@"/>
</define>
<define name="builtin-key-mgmt-mask" type="uint32" constraint="bitmap">
  <@@WIRELESS_KEY_MGMT_NAME@@ bit="@@WIRELESS_KEY_MGMT_VALUE@@"/>
</define>
<define name="builtin-eap-method-mask" type="uint32" constraint="bitmap">
  <@@WIRELESS_EAP_METHOD_NAME@@ bit="@@WIRELESS_EAP_METHOD_VALUE@@"/>
</define>


<!-- Built-in bonding modes -->
<define name="builtin-bonding-mode" type="uint32" constraint="enum">
  <@@BONDING_MODE_NAME@@ value="@@BONDING_MODE_VALUE@@"/>
</define>
<define name="builtin-bonding-arp-validate" type="uint32" constraint="enum">
  <description>
    Specifies whether or not ARP probes and replies should be validated in the
    active-backup mode.
  </description>
  <@@BONDING_ARP_VALIDATE_NAME@@ value="@@BONDING_ARP_VALIDATE_VALUE@@"/>
</define>
<define name="builtin-bonding-mii-carrier-detect" type="uint32" constraint="enum">
  <description>
    Specifies whether the MII monitor will use the netif network interface carrier
    or the deprecated MII / ETHTOOL ioctls to determine the status of the slaves.
    Default is to query netif carrier, but when the MII monitor fails to detect
    carrier loss (e.g. disconnected cable) of a slave or it appears that the MII
    monitor is very slow in detecting link failures, try specifying ioctl.
  </description>
  <@@BONDING_MII_CARRIER_DETECT_NAME@@ value="@@BONDING_MII_CARRIER_DETECT_VALUE@@"/>
</define>
<define name="builtin-bonding-xmit-hash-policy" type="uint32" constraint="enum">
  <description>
    Selects the transmit hash policy to use for slave selection in balance-xor
    and 802.3ad modes. The policies layer2 and layer23 are ieee802-3ad compliant.
  </description>
  <@@BONDING_XMIT_HASH_NAME@@ value="@@BONDING_XMIT_HASH_VALUE@@"/>
</define>
<define name="builtin-bonding-lacp-rate" type="uint32" constraint="enum">
  <description>
    Option specifying the rate in which the bond interface will ask the link
    partner to transmit LACPDU packets in 802.3ad mode.
  </description>
  <@@BONDING_LACP_RATE_NAME@@ value="@@BONDING_LACP_RATE_VALUE@@"/>
</define>
<define name="builtin-bonding-ad-select" type="uint32" constraint="enum">
  <description>
    Specifies the 802.3ad aggregation selection logic to use.
  </description>
  <@@BONDING_AD_SELECT_NAME@@ value="@@BONDING_AD_SELECT_VALUE@@"/>
</define>
<define name="builtin-bonding-fail-over-mac" type="uint32" constraint="enum">
  <description>
    Specifies whether active-backup mode should set all slaves to the same
    MAC address at enslavement, or perform special handling of the bond's
    MAC address in accordance with the selected policy.
  </description>
  <@@BONDING_FAIL_OVER_MAC_NAME@@ value="@@BONDING_FAIL_OVER_MAC_VALUE@@"/>
</define>
<define name="builtin-bonding-primary-reselect" type="uint32" constraint="enum">
  <description>
    Specifies the reselection policy for the primary slave. This affects how
    the primary slave is chosen to become the active slave when failure of
    the active slave or recovery of the primary slave occurs. This option
    is designed to prevent flip-flopping between the primary slave and other
    slaves.
  </description>
  <@@BONDING_PRIMARY_RESELECT_NAME@@ value="@@BONDING_PRIMARY_RESELECT_VALUE@@"/>
</define>

<!-- Built-in route type/scope/table/protocol -->
<define name="builtin-route-type" type="uint32" constraint="enum">
  <@@ROUTE_TYPE_NAME@@ value="@@ROUTE_TYPE_VALUE@@"/>
</define>
<define name="builtin-route-scope" type="uint32" constraint="enum">
  <@@ROUTE_SCOPE_NAME@@ value="@@ROUTE_SCOPE_VALUE@@"/>
</define>
<define name="builtin-route-protocol" type="uint32" constraint="enum">
  <@@ROUTE_PROTOCOL_NAME@@ value="@@ROUTE_PROTOCOL_VALUE@@"/>
</define>
<define name="builtin-route-table" type="uint32" constraint="enum">
  <@@ROUTE_TABLE_NAME@@ value="@@ROUTE_TABLE_VALUE@@"/>
</define>
<define name="builtin-route-flag-mask" type="uint32" constraint="bitmap">
  <@@ROUTE_FLAG_NAME@@ bit="@@ROUTE_FLAG_VALUE@@"/>
</define>
<define name="builtin-route-nh-flag-mask" type="uint32" constraint="bitmap">
  <@@ROUTE_NH_FLAG_NAME@@ bit="@@ROUTE_NH_FLAG_VALUE@@"/>
</define>
<define name="builtin-route-metrics-lock-mask" type="uint32" constraint="bitmap">
  <@@ROUTE_METRICS_LOCK_NAME@@ bit="@@ROUTE_METRICS_LOCK_VALUE@@"/>
</define>

<!-- Built-in infiniband ipoib mode/multicast types -->
<define name="builtin-infiniband-mode" type="uint32" constraint="enum">
  <@@INFINIBAND_MODE_NAME@@ value="@@INFINIBAND_MODE_VALUE@@"/>
</define>
<define name="builtin-infiniband-umcast" type="uint32" constraint="enum">
  <@@INFINIBAND_UMCAST_NAME@@ value="@@INFINIBAND_UMCAST_VALUE@@"/>
</define>

<!-- Built-in vlan protocol names -->
<define name="builtin-vlan-protocol" type="uint16" constraint="enum">
  <@@VLAN_PROTOCOL_NAME@@ value="@@VLAN_PROTOCOL_VALUE@@"/>
</define>

<!-- Built-in lldp types and capabilities -->
<define name="builtin-lldp-type" type="uint32" constraint="enum">
  <@@LLDP_DESTINATION_NAME@@ value="@@LLDP_DESTINATION_VALUE@@"/>
</define>
<define name="builtin-lldp-system-capabilities" type="uint32" constraint="bitmap">
  <@@LLDP_SYSTEM_CAPABILITY_NAME@@ bit="@@LLDP_SYSTEM_CAPABILITY_VALUE@@"/>
</define>
