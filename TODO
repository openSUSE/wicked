
wickedd:
	- bug: linkUp on an interface that's up never returns the
	  event callback.
	- bug: sometimes wpa supplicant just stops scanning
	- support global (non-interface) routes
	- support ppp: have a deviceNew method that associates a pppN
	  and use deviceChange to bring up pppd.
	- handle SIGTERM/SIGINT: bring down addrconf services, restore
	  resolv.conf etc.
	- write addrconf leases to a file
	- when a wlan device changes association, tell dhcp about it
	  so that it can request a new lease
	- express explicit dependencies between devices.
	   <meta:require check="netif-up">eth0</meta:require>
	  or some such.
	- Allow wicked to request event notification when the resolver
	  changes, or when a host becomes reachable?

	- Add a naming service to identify a PCI hotplug device by its
	  enclosure.

	- route tables and improve routing support, implement routing
	  tables/rules rules support to configure simple multihoming.
	  Note: Our productive servers (dist.suse.de) require this.
	- multipath routes nexthop routes over multiple links/gateways + weight

	- sysctl: Implemented are: disable_ipv6, autoconf, forwarding,
	  accept_redirects, use_tempaddr. Support more: for IPv6, there are more
	  useful to e.g. to catch corner cases, e.g.: accept_ra, proxy-ndp, ...

	- ethtool: Most are implemented (offload gso,gro,ufo,tso, …), but not
	  all. Verify: Some (e.g. lro with netxen NIC) can be set after link is
	  up only.

	- hotplugging: there are some parts/mechanisms, status unknown. as
	  wickedd does not read and execute interface configs itself, I suppose
	  this has to be addressed (ifup supports physical interfaces & bonding
	  slaves).

	- interface match:
	  - Wicked implements matching by other references than name, AFAIR by
	    mac and by pci bus id currently [as alternative to udev rules]. How
	    complete is the current “match” implementation [e.g. s390 specific
	    things]?
	  - Add biosdevname support [allow to use without udev rules renames]
	  - Add support for PXE BOOTIF kernel parameter selected interface
	    [Required by Adrian / build-system worker VMs; using udev rules does
	    not work there!]

	- Support for IBFT / ISCSI, FcoE, NFS, ...
	  - Reading/using iBFT firmware as config is incomplete. fw parsing is
	    implemented (shell/extension script) and contains config generation
	    from firmware already, but is incomplete and IMO never tested; no
	    support for e.g. iBFT dns servers yet.
	  - Some mechanisms for “nfsroot” are there, IMO untested/incomplete
	  - Provide solution for remote-device shutdown order problem:
	    There is an shutdown order problem, especially with remotedevices,
	    which are using e.g. LVM which is used also by local disks as well.
	    Current “ifup solution” is that the ISCSI / FcoE scripts are putting
	    interfaces into “nfsroot” mode “on the fly” until shutdown and
	    overriding any STARTMODE setting in the ifcfg configs.  This causes
	    to: start the dhcp clients in “persistent” mode, that is never
	    remove any IP address from interface and reject to set link down.

	- LLDP and DCBX:
	  - Basic LLDP code is there, as well as DCBX TLV encoding/decoding
	    - Above all, this needs testing
	    - There should be a global setting for enabling/disabling
	      LLDP tx and rx.
	    - When a NIC does not support DCB, we spit out an ugly error
	      message. We should not do this
	    - When receiving a DCBX message, we currently update the operating
	      params, but never write them back to the kernel.

	- dhcpv4 support
	  - write lease/state to disk [currently in memory only]
	  - verification for infiniband required [client-id/DUID differs]
	  - try to request (renew) iBFT provided address in iBFT-dhcp mode (but
	    do newer remove it from the interface, even the dhcp server suggests
	    other IP; add additionally instead) to not break iSCSI[, ...]
	    devices.
	  - Bug #657402: fix broadcast vs. unicast: dhcp renew is broadcasted
	    [has to be unicast to server] are dropped on gateways/relays [e.g.
	    cisco routers], when the server is behind a router. Further, AFAIR
	    other requests were not correctly addressed, too.
	  - fix save-state code

	- dhcpv6 support
	  - write lease/state to disk [currently in memory only, discarded on
	    restart]
	  - verification for infiniband required [client-id/DUID differs]
	  - try to request (renew) iBFT provided address in iBFT-dhcp mode, but
	    do newer remove it from the interface, even dhcp server suggests
	    other one as this could break mouted iSCSI volumes.
	  - use „confirm“ on start [requires persistent state/lease] and when
	    mandatory the link goes away and comes back
	  - It is an initial implementation, not all features complete & enabled
	    yet: currently requesting (and delivering back to wickedd) only
	    non-temporary address and a very minimalistic set of options.
	    Add/enable some important, DHCPv6 specific options and deliver to
	    wicked. The dhcp client <-> server exchange is implemented in most
	    cases, but then data gets discarded.
	  - Code reading the netlink info from kernel is already there, but I've
	    not finished it / events data is not processed at the moment: Finish
	    “auto” mode to follow router-advertisment [network admin suggestion]
	    and “info-only” mode [just options, no address needed for tahi?].  

	- Autoipv4 / Zeroconf support
	  - Implemented, status unknown (=“+autoip” in ifup)

	- Autoipv6 Support [in the kernel + daemon directly]
	  - Kernel netlink events are received in the daemon
	  - Currently “autoip” code feels responsible for IP addresses which
	    were provided by dhcpv6 and causes some confusion/conflicts/error
	    messages [DHCPv4/v6 does not write leases].
	  - RDNSS support (nameservers via autoconf): receiving it from kernel
	    is implemented, but currently never used (not written to
	    resolv.conf)


ifup replacement features:
	- ifplugd: we could support this in the wicked client using
	  some <policy> element.

	  For each interface marked this way, wicked would background
	  itself, and monitor linkUp/linkDown events.

	- Support all sorts of trigger scripts when interfaces are
	  brought up and down.
	  execute scripts from ifup.d and ifdown.d
	  execute {ifup,ifdown}-connections

	- Make interface selection less messy (unify all the --boot-* and --skip-*
	  options and provide one generic expression mechanism)

	- ifcfg config file converter
	  - Enable the use of the converter by default [by explicit config, …
	    anyhow], so it works out of the box using ifcfg files
	  - Currently there are two calls needed:
	    • wicked convert --format suse --output /some/path/bond0.xml
	    /etc/sysconfig/network/ifcfg-bond0
	    • wicked ifup --ifconfig /some/path/bond0.xml bond0
	    Update:
	    • wicked ifup compat:/etc/sysconfig/network was recently added

	- network/ifcfg-*
	  - Complete support of /etc/sysconfig/network/ifcfg-* files
	    [many code has been “cloned+tweaked” for libnetcontrol]
	  - Bonding options are IMO incomplete, but may be used in ifcfg files
	    [see bond interface support]; ensure to at least ignore them
	    properly
	  - Fix some bridge variable parsing bugs (priority/path-cost parsing)
	  - Support the VLAN_ID variable (custom interface names)
	  - Support for TUNNEL variable (tun/tap/sit/gre/ipip/..)
	  - Convert WIRELESS_* variables, currently dummy code
	  - reading only the WIRELESS_ESSID variable
	  - Convert also per-network WIRELESS_*[NET]
	  - ETHTOOL_OPTIONS[SUFFIX] – it is an array on SLE11-SP2 mandatory
	  - Convert BOOTPROTO=ifplugd + IFPLUGD_PRIORITY; Used by default on
	    notebooks with eth+wlan interface to set up an “OR + priority”
	    interfaces sets.
	  - SEND_GRATUITOUS_ARP/CHECK_DUPLICATE_IP
	  - ??? LABEL[SUFFIX], SCOPE[SUFFIX], IP_OPTIONS[SUFFIX]

	- network/routes
	  - Fix routes / ifroutes parsing [incomplete, see libnetcontrol]

	- network/config
	  - Handle NETCONFIG_* variables somehow
	    • Netconfig is currently used by all software to update dns/nis
	      config in the system and add ntp servers to ntpd, that is by
	      ifup(ibft,dhcp,ppp), NetworkManager, openvpn, … avahi [at least
	      if configured].
	    • All the variables, especially NETCONFIG_DNS_* and
	      NETCONFIG_*_POLICY are used by yast2 and all sort of modules like
	      yast2-network, yast2-{nis,dhcp,dns} which rely on them / the
	      settings netconfig is applying [e.g. resolv + bind forwarders].
	    • Netconfig(8) supports applying of static/static-asfallback and
	      dynamic nis,ntp,dns settings it receives from dhcp/ppp/NM/avahi/VPN
	      software and applying them to system configuration files
	      (/etc/yp.conf, nisdomain, ntpd at runtime) according to an admin
	      definable a policy. In case of DNS settings it supports multiple
	      destinations as /etc/resolv.conf and/or dnsmasq/bind [forwarder]
	      and provides provides “priority” / “ranking” support , so e.g.
	      nameserver provided by VPN are written to the front of resolv.conf
	      list, before the settings provided by DHCP [same interface as VPN]
	      and when enabled, also from avahi, but as fallback only.
	  - Handle other global options? I don't see any now.

	- network/dhcp
	  - Handle more global dhcp options? I don't see the need _now_ except
	    of SET_HOSTNAME (IMO crap).
	    Currently parsed DHCLIENT_* options are:
	    HOSTNAME_OPTION, CLIENT_ID, VENDOR_CLASS_ID, WAIT_AT_BOOT,
	    LEASE_TIME.

	- network/ifsysctl
	  - Currently no ifsysctl(5) support in the converter at all

	- network/ifndpproxy
	  - Currently no ifndp-proxy(5) support in the converter at all
	    [virtualization@ISP != bridged(eth0), “routed” VM IP from same
	    network as the IP assigned to eth0 interface]

	- if-{up,down].d
	  - What about all the “ifup” hooks installed by another software (e.g.
	    samba-client with its MODIFY_SMB_CONF, xen, ...)?
	    I don't think it makes sense to try to call as they are; it would
	    not work because:
	    a) sysconfig scripts/funcions are not available/installed,
	    b) different dhcp client in use, … ifup state is not available
	    c) perhaps they're not needed at all, e.g. samba-client hook needs
	       to be adopted, xen too.

wicked-nanny:
	- policy daemon (provides NM like functionality)
	- Discover how to deal with it / interview Olaf about ;-)
	  I've looked at it, but have not much idea about / never really tried
	  to effectively use it until now.
	  Required to support multiple wlan networks per interface and ifplugd
	  sets?


firewall:
	- Integrate SuSEfirewall2 as firewall extension script
	- Currently there is an empty wicked extension script called with “up”
	  and “down” similar as in ifup case [which has also “lock/unlock” batch
	  stuff to save some CPU).
	  → just call SuSEfirewall2 from the extension hook.
	- There are also another things in the schema, but seems to be “how we
	  could make more” examples only.
	  → Cleanup/Remove the additional examples from firewall schema for now


source tree:
	- Cleanup the code and carefully refactor a bit.
	- Cleanup and document [--help] all options in [e.g. wicked client]
	- Fix to use reetrant function variants. Most other code (yast2,
	  libvirt, …) are threaded; the use of some functions or own nonreetrant
	  helper-functions (like ni_sockaddr_print) breaks the use of libwicked
	  to implement e.g. libvirt driver or the use in yast2.
	- Beeing able to disable e.g. “ppp” or “wireless” support in the code
	  would be very helpful and help to pass security audit. This would
	  require some refactoring to have all e.g. ppp code in one place...
	- Review and fix / drop obsolete documentation [man pages, ...]

packaging:
	- Adopt libnetcontrol to not check ifup state but wicked's
	- Adopt yast2[-network]: I guess, there will be something to do
	- Adopt all the other packages like Hyper-V, ppp scripts, avahi, … (or
	  the we're going to replace netcontrol) as needed

dbus:
	- replace all those dbus_variant_t argv[...] arrays with a
	  ni_dbus_argv_t, with corresponding functions for initialization
	  and destruction. Also taking care of the variant __magic cookie
	  field.

netinfo:
	- Introduce an <access-provider> abstraction; this can be either
	  a wireless network (ESSID, security information); an Internet
	  dialup network (eg providing a phone number, security information),
	  a mobile IP provider (UMTS), etc.

ifconfig
	- use wpa_supplicant for 802.1x too
	- disable IPv6 on a device if requested
	- support ppp, pppoe

overall
	- Add INSTALL file describing how to build wicked

extensions
	- add support conversion to a different file format when running extensions
	- escape/reject shell metacharacters when expanding start/stop command

bonding:
	- Almost complete implementation 
	- Bug in bond factory breaks the creation and enslavement, 
	  incomplete dbus interface implementation 
	- Make sure to handle ib-bond vs. eth-bond: initially, a bond is using
	  ethernet arp type and changes to the type of the first slave at
	  enslave. While eth-bond can be used in bridges/vlan, ib-bond can't.
	- Make sure option dependencies are handled correctly [AFAIR, there were
	  some bugs]
	- Ensure options are applied correctly: some bond interface options have
	  to be applied before adding slaves, some after adding the [first]
	  slave[s].
	- Support complete set of bond options (active_slave, ad_select,
	  all_slaves_active, primary_reselect, fail_over_mac, lacp_rate,
	  num_grat_arp, num_unsol_na, resend_igmp, queue_id ).

wireless:
	- Incomplete. Working, but may not work in some cases (complex)

other link layers:
	- totally unsupported as of yet:
	  * token ring
	  * isdn, ppp, slip
	  * tunneling (SIT, GRE, IPIP)
	  * Tun/Tap, Implemented as base for OpenVPN, other use cases unknown
	  * VPN, Implemented, but untested
	  * PPP, modeled, implemented as dummy not starting pppd yet
	  * PPPoE, modeled, implemented as dummy not starting pppd yet
	  * more?
